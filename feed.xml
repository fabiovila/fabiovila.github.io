<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>fabiovila</title>
    <link href="https://fabiovila.github.io/feed.xml" rel="self" />
    <link href="https://fabiovila.github.io" />
    <updated>2021-05-21T10:03:31-03:00</updated>
    <author>
        <name>Fabio</name>
    </author>
    <id>https://fabiovila.github.io</id>

    <entry>
        <title>O CVXPY para o problema de mochila (knapsack)</title>
        <author>
            <name>Fabio</name>
        </author>
        <link href="https://fabiovila.github.io/o-cvxpy-para-o-problema-de-mochila-knapsack.html"/>
        <id>https://fabiovila.github.io/o-cvxpy-para-o-problema-de-mochila-knapsack.html</id>

        <updated>2021-05-21T10:03:31-03:00</updated>
            <summary>
                <![CDATA[
                    CVXPYCVXPY é um framework python para diversos otimizadores com uma linguagem própria e suporte a Numpy. Para instalar o CVXPY use o pip: pip install cvxpy Um dos otimizadores disponíveis é o CBC um otimizador de programação linear inteiro open-source. O CBC pode ser usado&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h2>CVXPY</h2>
<p>CVXPY é um framework python para diversos otimizadores com uma linguagem própria e suporte a Numpy.</p>
<p>Para instalar o CVXPY use o pip:</p>
<p><code>pip install cvxpy</code></p>
<p>Um dos otimizadores disponíveis é o <a href="https://projects.coin-or.org/Cbc" target="_blank" rel="noopener noreferrer">CBC</a>  um otimizador de programação linear inteiro open-source. O CBC pode ser usado em linha de comando sem ser necessário o CVXPY, mas neste caso será necessário aprender sua linguagem de entrada. </p>
<p>Também será necessário instalar o CVXOPT:</p>
<p><code>pip install cvxopt</code></p>
<h2>Problema da mochila</h2>
<p>O problema da mochila mais conhecido como knapsack é um problema clássico de otimização combinatória.</p>
<p>O problema consiste em colocar o maior valor possível de itens em uma mochila com certa capacidade de peso. A mochila tem uma capacidade definida de peso. Os itens um peso e um valor. A objetivo é ter o maior valor possível dentro da mochila, ou seja, maximizar o valor.</p>
<p>Esse problema aparece em diversas áreas como a logística, computação e investimentos.</p>
<pre class="ft-syntax-highlight" data-syntax="html">import cvxpy as cp<br>import numpy as np<br><br><br># Dados de entrada do problema<br><br>Valores = np.array([10,13,1,100,45,13,156,76,4,59,97,99])<br>Pesos = np.array([50,55,10,5,1,98,34,3,9,3,7,19])<br><br>Capacidade_Mochila = 100<br><br># Variaveis de decisão<br># Cada Item Xi terá valor 1 se estiver na mochila ou 0 se estiver fora<br># cp.Variable cria uma variável no CVX ( não confunda cp com np ) do tipo boolean do tamanho da quantidade de itens<br><br>Xi = cp.Variable((Valores.size), boolean = True)<br><br># Constraints do problema<br><br># A soma total dos pesos dos itens escolhidos por Xi devem ser igual ou menor que a capacidade da mochila                <br>constraints = [ Xi @ Pesos &lt;= Capacidade_Mochila ]<br><br># Tambem pode ser escrito com o mesmo resultado como:<br>#constraints = [ cp.sum( cp.multiply (Xi, Pesos ) ) &lt;= Capacidade_Mochila ]<br><br># O Objetivo do problema<br># é maximizar os valores na mochila<br>objective = cp.Maximize( Xi @ Valores )<br><br># finalmente chamamos o solver com verbose para acompanhar <br># o progresso e a execução máxima de 1hr<br>prob = cp.Problem(objective, constraints)              <br>prob.solve(solver=cp.CBC,verbose=True, maximumSeconds = 1 * 60 * 60)         <br>print("Status          : ", prob.status)<br>print("Valor encontrado: ", prob.value)<br>print("Valor de Xi     : ", Xi.value)</pre>
<p>O problema da mochila tem muitas aplicações práticas principalmente na logística. Imagine uma transportadora que precisa distribuir seus pacotes utilizando vans e caminhões. Cada pacote tem peso, tamanho, localidade, tempo de espera e valor. Um programa de otimização pode ajudar no preenchimento dos caminhões e em aplicações profissionais traçar a rota de distribuição de cada veículo.</p>
<p>Problemas de otimização não acham o melhor valor, porque em geral é uma tarefa impossível (o mais correto seria improvável) de acha-lo devido a explosão combinatória. Por isso são chamado 'otimizadores' porque eles buscam a melhor solução possível, ou seja, uma solução ótima.</p>
            ]]>
        </content>
    </entry>
</feed>
