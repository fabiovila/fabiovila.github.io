<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2024-10-17T19:07:34-05:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Explorando o método Runge-Kutta em javascript</title><link href="http://0.0.0.0:4000/aplicadas/2024/10/17/runge-kutta-em-javascript.html" rel="alternate" type="text/html" title="Explorando o método Runge-Kutta em javascript" /><published>2024-10-17T00:00:00-05:00</published><updated>2024-10-17T00:00:00-05:00</updated><id>http://0.0.0.0:4000/aplicadas/2024/10/17/runge-kutta-em-javascript</id><content type="html" xml:base="http://0.0.0.0:4000/aplicadas/2024/10/17/runge-kutta-em-javascript.html">&lt;h2 id=&quot;bricando-com-equações-diferenciais-pelo-método-rk4&quot;&gt;Bricando com equações diferenciais pelo método RK4&lt;/h2&gt;

&lt;p&gt;Equações diferenciais frequentemente surgem em modelos que estão associados a sistemas fisicos que armazenam energia, porém econtrar a solução de uma equação diferencial não é trivial e muitas equações ainda não tem solução algébrica conhecida. Essas equações foram e são ainda um campo de interesse em uma corrida para encontrar soluções para algumas famílias de equações diferenciais. Todavia, não ter uma solução algébrica não impede de obter os valores dessas equações, para tanto, métodos iterativos foram desenvolvidos para esse fim.&lt;/p&gt;

&lt;p&gt;Antes de ver alguns desses métodos em Java Script, abaixo você poderá explorar graficamente equações diferenciais resolvidas pelo método Runge-Kutta.&lt;/p&gt;

&lt;p&gt;Utilize o formato javascript, Math pode ser suprimido.&lt;/p&gt;

&lt;div&gt;
&lt;div class=&quot;field is-horizontal&quot;&gt;
  &lt;div class=&quot;field-label is-normal&quot;&gt;
    &lt;label class=&quot;label&quot;&gt;Parametros&lt;/label&gt;
  &lt;/div&gt;
  &lt;div class=&quot;field-body&quot;&gt;
    &lt;div class=&quot;field&quot;&gt;
      &lt;div class=&quot;control&quot;&gt;
        &lt;input id=&quot;h&quot; class=&quot;input is-primary&quot; type=&quot;text&quot; placeholder=&quot;Valor de H&quot; value=&quot;0.0001&quot; /&gt;
        &lt;p class=&quot;help&quot;&gt;Passo para cada iteração (H)&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;field&quot;&gt;
      &lt;div class=&quot;control&quot;&gt;
        &lt;input id=&quot;t&quot; class=&quot;input is-primary&quot; type=&quot;text&quot; placeholder=&quot;Tempo&quot; value=&quot;10.0&quot; /&gt;
        &lt;p class=&quot;help&quot;&gt;Tempo limite&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
      &lt;div class=&quot;control&quot;&gt;
        &lt;input id=&quot;x0&quot; class=&quot;input is-primary&quot; type=&quot;text&quot; placeholder=&quot;x0&quot; value=&quot;0&quot; /&gt;
        &lt;p class=&quot;help&quot;&gt;Valor inicial de x0&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
        &lt;div class=&quot;field&quot;&gt;
      &lt;div class=&quot;control&quot;&gt;
        &lt;input id=&quot;y0&quot; class=&quot;input is-primary&quot; type=&quot;text&quot; placeholder=&quot;y0&quot; value=&quot;0&quot; /&gt;
        &lt;p class=&quot;help&quot;&gt;Valor inicial de y0&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;field has-addons&quot;&gt;
  &lt;div class=&quot;control is-expanded&quot;&gt;
    &lt;input id=&quot;eq&quot; class=&quot;input is-primary&quot; type=&quot;text&quot; placeholder=&quot;Equação formato JavaScript&quot; value=&quot;y+cos(x**2)&quot; /&gt;
  &lt;/div&gt;
  &lt;div class=&quot;control&quot;&gt;
    &lt;button id=&quot;calcular&quot; class=&quot;button is-link&quot;&gt;Calcular&lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;gd&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;método-de-euler&quot;&gt;Método de Euler&lt;/h3&gt;

&lt;p&gt;Os algoritmos iteram através de estimativas do próximo valor que, então, é utilizado na próxima iteração. Esses métodos partem de uma condição inicial definida pelo usuário e a cada iteração uma estimativa do próximo valor é calculado repetindo-se o processo com o valor anterior.&lt;/p&gt;

&lt;p&gt;O primeiro método foi criado pelo famoso matemático Euler cujo nome é Método de Euler. Esse método faz apenas uma estimativa pontual do próximo e continua o processo. Como sua estimativa é fraca, erros se acumulam a cada iteração tornando inútil os valores por explodirem ou oscilarem. Entretanto por ser simples e fácil de implementar o método de Euler costuma exemplo de partida para estudos desses algoritmos.&lt;/p&gt;

&lt;p&gt;Como este site é primariamente de eletrônica, vamos partir do exemplo do circuito RL abaixo que foi tema de artigo &lt;sup id=&quot;fnref:anterior&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:anterior&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; para começar a explorar alguns métodos:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/circuit-rl.png&quot; alt=&quot;Circuito RL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para uma fonte DC de 5V o circuito é modelado pela seguinte equação diferencial&lt;/p&gt;

&lt;p&gt;$5 = 4700 i{\left(t \right)} + 0.0001 \frac{d}{d t} i{\left(t \right)}$&lt;/p&gt;

&lt;p&gt;Isolando $di(t) \over {dt}$ obtemos&lt;/p&gt;

&lt;p&gt;${di(t) \over dt} = \frac{5 - 4700 * i(t)}{0.0001}$&lt;/p&gt;

&lt;h2 id=&quot;método-de-euler-1&quot;&gt;Método de Euler&lt;/h2&gt;

&lt;p&gt;O método de Euler é um método simples e didático. Primeiramente precisamos definir a função com a equaçao diferencial que será chamada a cada iteração para se obter o próximo valor. A função didt(t,i) definida abaixo é a equação do circuito RL visto acima.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function didt(t, i) {
return (5 - 4700 * i) / 0.0001;
}

function Euler(y0, x0, h, final, f) {
const r = [];
let x = x0;
let y = y0;

r[0] = y;
while (x &amp;lt; final) {
    y = y + h * f(x, y);
    x = x + h;
    r.push(y);
}
return r;
}

r = Euler(0, 0, 0.0001, 0.1, didt);

console.log(r);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Os parametros $x0$ e $y0$ são as condições iniciais da equação. Você também pode pensar como as condições iniciais do circuito, ou seja, no primeiro instante $t = 0$ e não há corrente no circuito, logo $y0 = 0$ e $x0 = 0$. Como o algoritmo é iterativo cada passo representa uma quantidade no tempo, dessa forma $h$ é a quantidade do passo dado no tempo. Como um circuito como esse se estabiliza rapidamente, $h$ deverá ser da ordem dos micro segundos ou nano segundos. $final$ informa ao algoritmo quando terminar.
O método de Euler é puramente didático. Ele faz péssimas estimativas do próximo valor que vão se acumulando, retornando, então, valores irreais e oscilatórios. De fato no programa acima em poucas iterações os valores se tornam irreais e explosivos.&lt;/p&gt;

&lt;h3 id=&quot;método-de-runge-kutta&quot;&gt;Método de Runge-Kutta&lt;/h3&gt;

&lt;p&gt;Amplamente utilizado, o método de Runge-Kutta converge adequadamente, não acumula muitos erros e tem poucas chances de oscilar. Em contraste ao método de Euler as estimativas são feitas através de média aritmética ponderada de 4 valores ($K_n$).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function didt(t, i) {
return (5 - 4700 * i) / 0.0001;
}

function RK(y0, x0, h, final, f) {
const r = [];
let x = x0;
let y = y0;
let k1, k2, k3, k4;

r.push(y);
while (x &amp;lt; final) {
    k1 = h * f(x, y);
    h2 = h / 2; // Uma pequena otimização
    k2 = h * f(x + h2, y + h2 * k1);
    k3 = h * f(x + h2, y + h2 * k2);
    k4 = h * f(x + h, y + h * k1);
    y = y + (h * (k1 + 2 * k2 + 2 * k3 + k4)) / 6;
    x = x + h;

    r.push(y);
}
return r;
}

r = Euler(0, 0, 0.0001, 0.1, didt);

console.log(r);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;script&gt;
var func;
const ctx = $(&quot;mycanvas&quot;);

function RK(y0, x0, h, final, f) {
    console.log(y0,x0,h,final);
const r = [];
let x = x0;
let y = y0;
let k1, k2, k3, k4;

r.push(y);
while (x &lt; final) {
    k1 = h * f(x, y);
    h2 = h / 2; // Uma pequena otimização
    k2 = h * f(x + h2, y + h2 * k1);
    k3 = h * f(x + h2, y + h2 * k2);
    k4 = h * f(x + h, y + h * k1);
    y = y + (h * (k1 + 2 * k2 + 2 * k3 + k4)) / 6;
    x = x + h;

    r.push(y);
}
return r;
}

$(&quot;calcular&quot;).onmouseup = (e) =&gt; {
    let equacao = $(&quot;eq&quot;).value;
    try {
        with(Math) {
            equacao = equacao.replace(&apos;²&apos;,&quot;**2&quot;);
            equacao = equacao.replace(&apos;³&apos;,&quot;**3&quot;);
            equacao = equacao.replace(&apos;^&apos;,&quot;**&quot;);
            func = new Function(&quot;x,y&quot;,&quot;with(Math) { return (&quot; + equacao + &quot;);}&quot;);
            let r = RK(parseFloat($(&quot;y0&quot;).value), parseFloat($(&quot;x0&quot;).value), parseFloat($(&quot;h&quot;).value), parseFloat($(&quot;t&quot;).value), func);

            Plotly.newPlot(&quot;gd&quot;, { &quot;data&quot;: [{ &quot;y&quot;: r }], });
        }
    }
    catch(e) {
        console.log(e);
    }    
};

(function () {

})();


&lt;/script&gt;

&lt;script type=&quot;module&quot; charset=&quot;utf-8&quot;&gt;
import &quot;https://cdn.plot.ly/plotly-2.35.2.min.js&quot;
    let r = RK(0, 0, 0.0001, 10, (x,y) =&gt;{return y+Math.cos(x**2);});
    Plotly.newPlot(&quot;gd&quot;, {&quot;data&quot;: [{ &quot;y&quot;: r }],})
&lt;/script&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:anterior&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://fabiovila.github.io/eletr%C3%B4nica/2021/02/10/simulacao-circuito-RL-python.html&quot;&gt;Usando Python para resolver ODEs de circuitos elétricos: RL - Python&lt;/a&gt; &lt;a href=&quot;#fnref:anterior&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="aplicadas" /><category term="matemática" /><category term="javascript" /><summary type="html">Bricando com equações diferenciais pelo método RK4</summary></entry><entry><title type="html">Significado dos códigos de falha DTC OBD2 da ECU - Aplicativo</title><link href="http://0.0.0.0:4000/app/2024/07/17/codigo-falhas-obd2-ecu.html" rel="alternate" type="text/html" title="Significado dos códigos de falha DTC OBD2 da ECU - Aplicativo" /><published>2024-07-17T00:00:00-05:00</published><updated>2024-07-17T00:00:00-05:00</updated><id>http://0.0.0.0:4000/app/2024/07/17/codigo-falhas-obd2-ecu</id><content type="html" xml:base="http://0.0.0.0:4000/app/2024/07/17/codigo-falhas-obd2-ecu.html">&lt;script&gt;
  var codigos;

function procurar(texto) {
  if (texto.length &lt; 3) return;
  var html = &quot;&lt;tr&gt;&lt;th&gt;Código&lt;/th&gt;&lt;th&gt;Descrição&lt;/th&gt;&lt;/tr&gt;&quot;;
  $(&apos;tresult&apos;).innerHTML = &quot;&quot;;
  for (const codigo of codigos) {
    const cdescr = codigo.cdescr || &quot;&quot;; 
    if (codigo.Code.includes(texto) || codigo.Description.includes(texto) || cdescr.includes(texto)){
      if (&quot;cdescr&quot; in codigo) {
        html += &quot;&lt;tr&gt;&lt;td class=&apos;has-text-weight-bold&apos;&gt;&quot; + codigo.Code + &quot;&lt;/td&gt;&lt;td class=&apos;has-text-weight-bold&apos;&gt;&quot; + codigo.Description + &quot;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&quot;+codigo.cdescr+&quot;&lt;/td&gt;&lt;/tr&gt;&quot;;
      } else {
        html += &quot;&lt;tr&gt;&lt;td&gt;&quot; + codigo.Code + &quot;&lt;/td&gt;&lt;td&gt;&quot; + codigo.Description + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;;
      }
      
    }
  }    
  $(&apos;tresult&apos;).innerHTML = html;
}

window.addEventListener(&quot;load&quot;, function(){
   fetch(&apos;/assets/json/codigos.json&apos;)
    .then((response) =&gt; response.json())
    .then((json) =&gt; codigos = json);
});
&lt;/script&gt;

&lt;hr class=&quot;m-1&quot; /&gt;

&lt;h3 id=&quot;digite-o-código-ou-alguma-palavra&quot;&gt;Digite o código ou alguma palavra&lt;/h3&gt;
&lt;form onsubmit=&quot;return false;&quot;&gt;
&lt;div class=&quot;field&quot;&gt;
&lt;div class=&quot;control has-icons-left has-icons-right&quot;&gt;
  &lt;input class=&quot;input&quot; onkeyup=&quot;procurar(this.value)&quot; id=&quot;tx&quot; type=&quot;text&quot; placeholder=&quot;Exemplo: P104 ou 104 ou sonda lambda&quot; /&gt;
  &lt;span class=&quot;icon is-medium is-left&quot;&gt;
    &lt;i class=&quot;fas fa-search&quot;&gt;&lt;/i&gt;
  &lt;/span&gt;
  &lt;span class=&quot;icon is-medium is-right&quot;&gt;
    &lt;i class=&quot;fas fa-check&quot;&gt;&lt;/i&gt;
  &lt;/span&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;field is-grouped&quot;&gt;
  &lt;div class=&quot;control&quot;&gt;
    &lt;button class=&quot;button is-rounded is-success&quot; onkeyup=&quot;procurar($(&apos;tx&apos;).value)&quot;&gt;Procurar&lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/form&gt;

&lt;h3 id=&quot;resultado&quot;&gt;Resultado&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Os comentários, soluções e descrições abaixo são genéricos. Cada carro e defeito tem particularidades que as soluções descritas podem não resolver ou ainda piorar o problema. Algumas atividades de manutenção requerem conhecimento técnico prévio, ferramentas adequadas e experiência do operador. Se não sabe o que está fazendo consulte um profissional.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;content&quot;&gt;
&lt;table id=&quot;tresult&quot;&gt;
&lt;/table&gt; 
&lt;/div&gt;</content><author><name></name></author><category term="app" /><category term="auto" /><category term="obd2" /><category term="ecu" /><summary type="html"></summary></entry><entry><title type="html">Cálculo de resistência pelas cores do resistor - Aplicativo</title><link href="http://0.0.0.0:4000/app/2024/01/24/calculo-resistores.html" rel="alternate" type="text/html" title="Cálculo de resistência pelas cores do resistor - Aplicativo" /><published>2024-01-24T00:00:00-06:00</published><updated>2024-01-24T00:00:00-06:00</updated><id>http://0.0.0.0:4000/app/2024/01/24/calculo-resistores</id><content type="html" xml:base="http://0.0.0.0:4000/app/2024/01/24/calculo-resistores.html">&lt;link href=&quot;/assets/css/colormenu.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;script&gt;
var valor = 220000;
var unidade = &quot;&quot;;
var faixas = [2,2,10000,20];

function formata (valor) {
    if (valor &lt; 1000) {
    unidade = &quot; Ω&quot;;
  } else if (valor &gt;= 1000 &amp;&amp; valor &lt; 1000000) {
    unidade = &quot; KΩ&quot;;
    valor = valor / 1000;
  } else if (valor &gt;= 1000000 &amp;&amp; valor &lt; 1000000000) {
    unidade = &quot; MΩ&quot;;
    valor = valor / 1000000;
  } else if (valor &gt;= 1000000000 &amp;&amp; valor &lt; 1000000000000) {
    unidade = &quot; GΩ&quot;;
    valor = valor / 1000000000;
  }
  valor = valor.toLocaleString(&apos;pt-BR&apos;, {minimumFractionDigits:0, maximumFractionDigits:2}) + unidade;
  return valor;
}

function updateValor(cor,index,v) {

  faixas[index] = v;
  valor = (faixas[0]*10+faixas[1])*faixas[2];

  if (valor &lt;= 100) { substituto = valor; } 
  if (valor &gt; 100)  { substituto = faixas[0]*100 + faixas[1]*10 + (Math.log10(Number(faixas[2])))   ; }


  console.log(cor,index,valor);
  tolerancia = faixas[3] + &quot;%&quot;;


  var alta  =  formata(valor * (1 + Number(faixas[3])/100));
  var baixa =  formata(valor * (1 - Number(faixas[3])/100));
  $(&quot;tolerancia&quot;).innerText = tolerancia  + &quot; &quot; + &quot;[ &quot; + alta + &quot;,&quot; + baixa + &quot; ]&quot;;
  valor = formata(valor);
  document.faixas[index].style.fill = cor;
  document.texto.innerHTML = valor;
  $(&quot;valor&quot;).innerText = valor;
  
}


&lt;/script&gt;

&lt;div class=&quot;section&quot;&gt;
&lt;div class=&quot;field is-grouped is-grouped-centered&quot;&gt;
  &lt;div class=&quot;control&quot;&gt;
      &lt;small&gt;1° Faixa&lt;/small&gt;
      &lt;div class=&quot;is-multiple&quot;&gt;

      &lt;label style=&quot;background-color: black; color: dark-grey;&quot; class=&quot;colorContainer&quot;&gt;Preto
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; disabled=&quot;disabled&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: brown; color: white;&quot; class=&quot;colorContainer&quot;&gt;Marrom
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;brown&apos;,0,1);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: red; color: white;&quot; class=&quot;colorContainer&quot;&gt;Vermelho
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;red&apos;,0,2);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: orange; color: white;&quot; class=&quot;colorContainer&quot;&gt;Laranja
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;orange&apos;,0,3);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: yellow; color: black;&quot; class=&quot;colorContainer&quot;&gt;Amarelo
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;yellow&apos;,0,4);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: green; color: white;&quot; class=&quot;colorContainer&quot;&gt;Verde
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;green&apos;,0,5);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;      

      &lt;label style=&quot;background-color: blue; color: white;&quot; class=&quot;colorContainer&quot;&gt;Azul
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;blue&apos;,0,6);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: violet; color: white;&quot; class=&quot;colorContainer&quot;&gt;Violeta
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;violet&apos;,0,7);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: grey; color: white;&quot; class=&quot;colorContainer&quot;&gt;Cinza
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;grey&apos;,0,8);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: white; color: black;&quot; class=&quot;colorContainer&quot;&gt;Branco
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;white&apos;,0,9);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;/div&gt;
  &lt;/div&gt;

    &lt;div class=&quot;control&quot;&gt;
    &lt;small&gt;2° Faixa&lt;/small&gt;
    &lt;div class=&quot;is-multiple&quot;&gt;
      
      &lt;label style=&quot;background-color: black; color: white;&quot; class=&quot;colorContainer&quot;&gt;Preto
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;black&apos;,1,0);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: brown; color: white;&quot; class=&quot;colorContainer&quot;&gt;Marrom
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;brown&apos;,1,1);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: red; color: white;&quot; class=&quot;colorContainer&quot;&gt;Vermelho
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;red&apos;,1,2);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: orange; color: white;&quot; class=&quot;colorContainer&quot;&gt;Laranja
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;orange&apos;,1,3);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: yellow; color: black;&quot; class=&quot;colorContainer&quot;&gt;Amarelo
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;yellow&apos;,1,4);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: green; color: white;&quot; class=&quot;colorContainer&quot;&gt;Verde
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;green&apos;,1,5);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;      

      &lt;label style=&quot;background-color: blue; color: white;&quot; class=&quot;colorContainer&quot;&gt;Azul
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;blue&apos;,1,6);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: violet; color: white;&quot; class=&quot;colorContainer&quot;&gt;Violeta
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;violet&apos;,1,7);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: grey; color: white;&quot; class=&quot;colorContainer&quot;&gt;Cinza
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;grey&apos;,1,8);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: white; color: black;&quot; class=&quot;colorContainer&quot;&gt;Branco
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;white&apos;,1,9);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

    &lt;/div&gt;
  &lt;/div&gt;

    &lt;div class=&quot;control&quot;&gt;
      &lt;small&gt;3° Faixa&lt;/small&gt;
    &lt;div class=&quot;is-multiple&quot;&gt;
    
      &lt;label style=&quot;background-color: black; color: white;&quot; class=&quot;colorContainer&quot;&gt;Preto
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;black&apos;,2,1);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: brown; color: white;&quot; class=&quot;colorContainer&quot;&gt;Marrom
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;brown&apos;,2,10);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: red; color: white;&quot; class=&quot;colorContainer&quot;&gt;Vermelho
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;red&apos;,2,100);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: orange; color: white;&quot; class=&quot;colorContainer&quot;&gt;Laranja
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;orange&apos;,2,1000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: yellow; color: black;&quot; class=&quot;colorContainer&quot;&gt;Amarelo
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;yellow&apos;,2,10000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: green; color: white;&quot; class=&quot;colorContainer&quot;&gt;Verde
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;green&apos;,2,100000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;      

      &lt;label style=&quot;background-color: blue; color: white;&quot; class=&quot;colorContainer&quot;&gt;Azul
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;blue&apos;,2,1000000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: violet; color: white;&quot; class=&quot;colorContainer&quot;&gt;Violeta
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;violet&apos;,2,10000000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: grey; color: white;&quot; class=&quot;colorContainer&quot;&gt;Cinza
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;grey&apos;,2,100000000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: white; color: black;&quot; class=&quot;colorContainer&quot;&gt;Branco
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;white&apos;,2,1000000000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: gold; color: black;&quot; class=&quot;colorContainer&quot;&gt;Ouro
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;gold&apos;,2,0.1);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: silver; color: black;&quot; class=&quot;colorContainer&quot;&gt;Prata
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;silver&apos;,2,0.01);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;

    &lt;div class=&quot;control&quot;&gt;
      &lt;small&gt;4° Faixa&lt;/small&gt;
    &lt;div class=&quot;is-multiple&quot;&gt;    
      &lt;label style=&quot;background-color: black; color: white;&quot; class=&quot;colorContainer&quot;&gt;Preto
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;black&apos;,3,20);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: brown; color: white;&quot; class=&quot;colorContainer&quot;&gt;Marrom
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;brown&apos;,3,1);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: red; color: white;&quot; class=&quot;colorContainer&quot;&gt;Vermelho
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;red&apos;,3,2);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: orange; color: white;&quot; class=&quot;colorContainer&quot;&gt;Laranja
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;orange&apos;,3,3);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: yellow; color: black;&quot; class=&quot;colorContainer&quot;&gt;Amarelo
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;yellow&apos;,3,4);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: green; color: white;&quot; class=&quot;colorContainer&quot;&gt;Verde
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;green&apos;,3,0.5);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;      

      &lt;label style=&quot;background-color: blue; color: white;&quot; class=&quot;colorContainer&quot;&gt;Azul
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;blue&apos;,3,0.25);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: violet; color: white;&quot; class=&quot;colorContainer&quot;&gt;Violeta
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;violet&apos;,3,0.1);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: grey; color: white;&quot; class=&quot;colorContainer&quot;&gt;Cinza
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;grey&apos;,3,0.05);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: white; color: black;&quot; class=&quot;colorContainer&quot;&gt;Branco
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;white&apos;,3,10);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: gold; color: black;&quot; class=&quot;colorContainer&quot;&gt;Ouro
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;gold&apos;,3,5);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: silver; color: black;&quot; class=&quot;colorContainer&quot;&gt;Prata
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;silver&apos;,3,10);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot;&gt;
&lt;div class=&quot;subtitle has-text-centered&quot;&gt;Selecione as cores acima para obter o resultado&lt;/div&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Valor&lt;/th&gt;
    &lt;th&gt;Tolerância&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td id=&quot;valor&quot; class=&quot;subtitle&quot;&gt;&lt;/td&gt;
    &lt;td id=&quot;tolerancia&quot; class=&quot;subtitle&quot;&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt; 
&lt;/div&gt;

&lt;h3 id=&quot;valores-comuns-de-resistores&quot;&gt;Valores comuns de resistores&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;330Ω&lt;/strong&gt; é um valor comum para alimentar um LED em 5V com corrente de 10mA&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1kΩ&lt;/strong&gt; é um valor comum para alimentar um LED em 5V com corrente de aproximadamente 3mA
    &lt;ul&gt;
      &lt;li&gt;Esse valor é usado pelo Arduino em série com os LEDs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1k2Ω&lt;/strong&gt; é um valor comum para alimentar um LED em 12V com corrente de aproximadamente 3mA&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;10KΩ&lt;/strong&gt; é um valor comum para Pull Up e Pull Down
    &lt;ul&gt;
      &lt;li&gt;Esse valor é usado pelo Arduino como Pull Up&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;510Ω&lt;/strong&gt; é usado pela placa BluePill (STM32 a 3,3 Volts) como resistor de LEDs&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;0.18Ω&lt;/strong&gt; e &lt;strong&gt;0.01Ω&lt;/strong&gt; são valores comuns para resistores Shunt ( sensores de corrente )&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;1MΩ&lt;/strong&gt; é normalmente usado em paralelo com cristais de clock&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;valores-comerciais&quot;&gt;Valores Comerciais&lt;/h3&gt;

&lt;p&gt;O comércio não comercializa todos os valores possíveis. A indústria padronizou alguns valores que são multiplicados pela 3° Faixa, por exemplo, o valor 8.2 pode ser 8.2Ω, 82Ω, 820Ω, 8,2KΩ e assim por diante. Na tabela abaixo pode-se conferir esses valores.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Padrão&lt;/th&gt;
      &lt;th&gt;E6, E12 e E24&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;1.1&lt;/td&gt;
      &lt;td&gt;1.2&lt;/td&gt;
      &lt;td&gt;1.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1.5&lt;/td&gt;
      &lt;td&gt;1.6&lt;/td&gt;
      &lt;td&gt;1.8&lt;/td&gt;
      &lt;td&gt;2.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2.2&lt;/td&gt;
      &lt;td&gt;2.4&lt;/td&gt;
      &lt;td&gt;2.7&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3.3&lt;/td&gt;
      &lt;td&gt;3.6&lt;/td&gt;
      &lt;td&gt;3.9&lt;/td&gt;
      &lt;td&gt;4.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6.8&lt;/td&gt;
      &lt;td&gt;7.5&lt;/td&gt;
      &lt;td&gt;8.2&lt;/td&gt;
      &lt;td&gt;9.1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Esses valores são para resistores de tolerância entre 5% e 20%. Para tolerâncias menores entre 1% e 0.1% a quantidade de valores comerciais é maior e neste caso uma faixa adicional é usada para indicar a maior precisão de valores.&lt;/p&gt;

&lt;script&gt;
document.obj = $(&quot;obj&quot;);
document.obj.addEventListener(&quot;load&quot;,function(){
  var svg = document.obj.contentDocument;
  document.faixas = [svg.getElementById(&quot;faixa1&quot;), svg.getElementById(&quot;faixa2&quot;), svg.getElementById(&quot;faixa3&quot;), svg.getElementById(&quot;faixa4&quot;)];
  document.texto = svg.getElementById(&quot;tspan13&quot;);
},false);
&lt;/script&gt;</content><author><name></name></author><category term="app" /><category term="eletrônica" /><category term="resistores" /><category term="código de cores" /><summary type="html"></summary></entry><entry><title type="html">Código de Cores de capacitores - Aplicativo</title><link href="http://0.0.0.0:4000/app/2024/01/23/calculo-capacitores.html" rel="alternate" type="text/html" title="Código de Cores de capacitores - Aplicativo" /><published>2024-01-23T00:00:00-06:00</published><updated>2024-01-23T00:00:00-06:00</updated><id>http://0.0.0.0:4000/app/2024/01/23/calculo-capacitores</id><content type="html" xml:base="http://0.0.0.0:4000/app/2024/01/23/calculo-capacitores.html">&lt;link href=&quot;/assets/css/colormenu.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;script&gt;
var valor = 220000;
var unidade = &quot;&quot;;
var faixas = [2,2,10000,0,0];

function formata (valor) {
    if (valor &lt; 1000) {
    unidade = &quot; pF&quot;;
  } else if (valor &gt;= 1000 &amp;&amp; valor &lt; 1000000) {
    unidade = &quot; nF&quot;;
    valor = valor / 1000;
  } else if (valor &gt;= 1000000 &amp;&amp; valor &lt; 1000000000) {
    unidade = &quot; uF&quot;;
    valor = valor / 1000000;
  } else if (valor &gt;= 1000000000 &amp;&amp; valor &lt; 1000000000000) {
    unidade = &quot; mF&quot;;
    valor = valor / 1000000000;
  }
  valor = valor.toLocaleString(&apos;pt-BR&apos;, {minimumFractionDigits:0, maximumFractionDigits:2}) + unidade;
  return valor;
}

function updateValor(cor,index,v) {

  faixas[index] = v;
  valor = (faixas[0]*10+faixas[1])*faixas[2];

  if (valor &lt;= 100) { substituto = valor; } 
  if (valor &gt; 100)  { substituto = faixas[0]*100 + faixas[1]*10 + (Math.log10(Number(faixas[2])))   ; }


  console.log(cor,index,valor);
  tolerancia = faixas[3] + &quot;%&quot;;


  var alta  =  formata(valor * (1 + Number(faixas[3])/100));
  var baixa =  formata(valor * (1 - Number(faixas[3])/100));
  $(&quot;tolerancia&quot;).innerText = tolerancia  + &quot; &quot; + &quot;[ &quot; + alta + &quot;,&quot; + baixa + &quot; ]&quot;;
  valor = formata(valor);
  document.faixas[index].style.fill = cor;
  document.texto.innerHTML = valor;
  $(&quot;valor&quot;).innerText = valor;
  $(&quot;equivalente&quot;).innerText = substituto.toLocaleString(&apos;en-US&apos;, {minimumFractionDigits:0, maximumFractionDigits:2});
  
}


&lt;/script&gt;

&lt;div class=&quot;section&quot;&gt;
&lt;div class=&quot;field is-grouped is-grouped-centered&quot;&gt;
  &lt;div class=&quot;control&quot;&gt;
      &lt;small&gt;1° Faixa&lt;/small&gt;
      &lt;div class=&quot;is-multiple&quot;&gt;

      &lt;label style=&quot;background-color: black; color: dark-grey;&quot; class=&quot;colorContainer&quot;&gt;Preto
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; disabled=&quot;disabled&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: brown; color: white;&quot; class=&quot;colorContainer&quot;&gt;Marrom
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;brown&apos;,0,1);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: red; color: white;&quot; class=&quot;colorContainer&quot;&gt;Vermelho
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;red&apos;,0,2);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: orange; color: white;&quot; class=&quot;colorContainer&quot;&gt;Laranja
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;orange&apos;,0,3);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: yellow; color: black;&quot; class=&quot;colorContainer&quot;&gt;Amarelo
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;yellow&apos;,0,4);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: green; color: white;&quot; class=&quot;colorContainer&quot;&gt;Verde
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;green&apos;,0,5);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;      

      &lt;label style=&quot;background-color: blue; color: white;&quot; class=&quot;colorContainer&quot;&gt;Azul
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;blue&apos;,0,6);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: violet; color: white;&quot; class=&quot;colorContainer&quot;&gt;Violeta
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;violet&apos;,0,7);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: grey; color: white;&quot; class=&quot;colorContainer&quot;&gt;Cinza
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;grey&apos;,0,8);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: white; color: black;&quot; class=&quot;colorContainer&quot;&gt;Branco
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;white&apos;,0,9);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;/div&gt;
  &lt;/div&gt;

    &lt;div class=&quot;control&quot;&gt;
    &lt;small&gt;2° Faixa&lt;/small&gt;
    &lt;div class=&quot;is-multiple&quot;&gt;
      
      &lt;label style=&quot;background-color: black; color: white;&quot; class=&quot;colorContainer&quot;&gt;Preto
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;black&apos;,1,0);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: brown; color: white;&quot; class=&quot;colorContainer&quot;&gt;Marrom
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;brown&apos;,1,1);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: red; color: white;&quot; class=&quot;colorContainer&quot;&gt;Vermelho
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;red&apos;,1,2);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: orange; color: white;&quot; class=&quot;colorContainer&quot;&gt;Laranja
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;orange&apos;,1,3);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: yellow; color: black;&quot; class=&quot;colorContainer&quot;&gt;Amarelo
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;yellow&apos;,1,4);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: green; color: white;&quot; class=&quot;colorContainer&quot;&gt;Verde
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;green&apos;,1,5);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;      

      &lt;label style=&quot;background-color: blue; color: white;&quot; class=&quot;colorContainer&quot;&gt;Azul
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;blue&apos;,1,6);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: violet; color: white;&quot; class=&quot;colorContainer&quot;&gt;Violeta
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;violet&apos;,1,7);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: grey; color: white;&quot; class=&quot;colorContainer&quot;&gt;Cinza
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;grey&apos;,1,8);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: white; color: black;&quot; class=&quot;colorContainer&quot;&gt;Branco
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;white&apos;,1,9);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

    &lt;/div&gt;
  &lt;/div&gt;

    &lt;div class=&quot;control&quot;&gt;
      &lt;small&gt;3° Faixa&lt;/small&gt;
    &lt;div class=&quot;is-multiple&quot;&gt;
    
      &lt;label style=&quot;background-color: black; color: white;&quot; class=&quot;colorContainer&quot;&gt;Preto
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;black&apos;,2,1);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: brown; color: white;&quot; class=&quot;colorContainer&quot;&gt;Marrom
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;brown&apos;,2,10);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: red; color: white;&quot; class=&quot;colorContainer&quot;&gt;Vermelho
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;red&apos;,2,100);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: orange; color: white;&quot; class=&quot;colorContainer&quot;&gt;Laranja
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;orange&apos;,2,1000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: yellow; color: black;&quot; class=&quot;colorContainer&quot;&gt;Amarelo
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;yellow&apos;,2,10000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: green; color: white;&quot; class=&quot;colorContainer&quot;&gt;Verde
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;green&apos;,2,100000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;      

      &lt;label style=&quot;background-color: blue; color: white;&quot; class=&quot;colorContainer&quot;&gt;Azul
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;blue&apos;,2,1000000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: violet; color: white;&quot; class=&quot;colorContainer&quot;&gt;Violeta
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;violet&apos;,2,10000000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: grey; color: white;&quot; class=&quot;colorContainer&quot;&gt;Cinza
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;grey&apos;,2,100000000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: white; color: black;&quot; class=&quot;colorContainer&quot;&gt;Branco
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;white&apos;,2,1000000000);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: gold; color: black;&quot; class=&quot;colorContainer&quot;&gt;Ouro
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;gold&apos;,2,0.1);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: silver; color: black;&quot; class=&quot;colorContainer&quot;&gt;Prata
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;silver&apos;,2,0.01);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;

    &lt;div class=&quot;control&quot;&gt;
      &lt;small&gt;4° Faixa&lt;/small&gt;
    &lt;div class=&quot;is-multiple&quot;&gt;    
      &lt;label style=&quot;background-color: black; color: white;&quot; class=&quot;colorContainer&quot;&gt;Preto
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;black&apos;,3,20);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: brown; color: white;&quot; class=&quot;colorContainer&quot;&gt;Marrom
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;brown&apos;,3,1);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: red; color: white;&quot; class=&quot;colorContainer&quot;&gt;Vermelho
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;red&apos;,3,2);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: orange; color: white;&quot; class=&quot;colorContainer&quot;&gt;Laranja
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;orange&apos;,3,3);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: yellow; color: black;&quot; class=&quot;colorContainer&quot;&gt;Amarelo
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;yellow&apos;,3,4);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: green; color: white;&quot; class=&quot;colorContainer&quot;&gt;Verde
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;green&apos;,3,5);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;      

      &lt;label style=&quot;background-color: blue; color: white;&quot; class=&quot;colorContainer&quot;&gt;Azul
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;blue&apos;,3,6);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: violet; color: white;&quot; class=&quot;colorContainer&quot;&gt;Violeta
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;violet&apos;,3,7);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: grey; color: white;&quot; class=&quot;colorContainer&quot;&gt;Cinza
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;grey&apos;,3,8);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: white; color: black;&quot; class=&quot;colorContainer&quot;&gt;Branco
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;white&apos;,3,10);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: gold; color: black;&quot; class=&quot;colorContainer&quot;&gt;Ouro
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;gold&apos;,3,5);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;

      &lt;label style=&quot;background-color: silver; color: black;&quot; class=&quot;colorContainer&quot;&gt;Prata
        &lt;input name=&quot;1&quot; type=&quot;radio&quot; onchange=&quot;updateValor(&apos;silver&apos;,3,10);&quot; /&gt;
        &lt;span class=&quot;colorBar&quot;&gt;&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;section&quot;&gt;
&lt;div class=&quot;subtitle has-text-centered&quot;&gt;Selecione as cores acima para obter o resultado&lt;/div&gt;
  &lt;table&gt;
  &lt;tr&gt;
    &lt;th&gt;Valor&lt;/th&gt;
    &lt;th&gt;Tolerância&lt;/th&gt;
    &lt;th&gt;Equivalente Atual&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td id=&quot;valor&quot; class=&quot;subtitle&quot;&gt;&lt;/td&gt;
    &lt;td id=&quot;tolerancia&quot; class=&quot;subtitle&quot;&gt;&lt;/td&gt;
    &lt;td id=&quot;equivalente&quot; class=&quot;subtitle&quot;&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt; 
&lt;/div&gt;

&lt;h3 id=&quot;substituição&quot;&gt;Substituição&lt;/h3&gt;

&lt;p&gt;Capacitores com código de cores são antigos e muito encontrados por quem restaura rádios, órgãos ou amplificadores antigos. Para substituir sugere-se os capacitores de &lt;strong&gt;poliéster&lt;/strong&gt; com a &lt;strong&gt;capacitância&lt;/strong&gt; e &lt;strong&gt;tensão indicada&lt;/strong&gt;. Em alguns casos capacitores de cerâmica podem ser usados como substitutos.&lt;/p&gt;

&lt;p&gt;O ideal é trocar todos os capacitores de equipamentos como esse. É comum encontrar alguns já estourados, rachados, descascando ou com boa aparência mas internamente já deteriorados pelo tempo.&lt;/p&gt;

&lt;script&gt;
document.obj = $(&quot;obj&quot;);
document.obj.addEventListener(&quot;load&quot;,function(){
  var svg = document.obj.contentDocument;
  document.faixas = [svg.getElementById(&quot;rect1-6&quot;), svg.getElementById(&quot;rect3&quot;), svg.getElementById(&quot;rect2&quot;), svg.getElementById(&quot;rect1-6-3&quot;)];
  document.texto = svg.getElementById(&quot;tspan1&quot;);
},false);
&lt;/script&gt;</content><author><name></name></author><category term="app" /><category term="eletrônica" /><category term="capacitores" /><category term="código de cores" /><summary type="html"></summary></entry><entry><title type="html">Órgãos Antigos dos Anos 70: Geradores e Divisores de Oitavas - Música Eletrônica</title><link href="http://0.0.0.0:4000/eletronica/2023/12/29/geradores-e-divisores-de-oitavas-org%C3%A3os-antigos.html" rel="alternate" type="text/html" title="Órgãos Antigos dos Anos 70: Geradores e Divisores de Oitavas - Música Eletrônica" /><published>2023-12-29T00:00:00-06:00</published><updated>2023-12-29T00:00:00-06:00</updated><id>http://0.0.0.0:4000/eletronica/2023/12/29/geradores-e-divisores-de-oitavas-org%C3%A3os-antigos</id><content type="html" xml:base="http://0.0.0.0:4000/eletronica/2023/12/29/geradores-e-divisores-de-oitavas-org%C3%A3os-antigos.html">&lt;h2 id=&quot;órgãos-antigos-dos-anos-70-geradores-e-divisores-de-oitavas&quot;&gt;Órgãos Antigos dos Anos 70: Geradores e Divisores de Oitavas&lt;/h2&gt;

&lt;p&gt;Os anos 70 foram uma época de efervescência musical e inovação tecnológica, e os órgãos eletrônicos desempenharam um papel crucial nesse cenário. Esses instrumentos, muitas vezes utilizados em bandas de rock progressivo, jazz fusion e música eletrônica da época, eram dotados de características sonoras únicas, inicialmente construidos com o objetivo de serem fiéis aos órgãos de tubos, sua sonoridade única e portabilidade logo achou seu lugar próprio na música.&lt;/p&gt;

&lt;h3 id=&quot;geradores-de-oitavas-a-base-do-som-único&quot;&gt;Geradores de Oitavas: A Base do Som Único&lt;/h3&gt;

&lt;p&gt;Os geradores de oitavas são circuitos eletrônicos projetados para gerar sinais de áudio em diferentes oitavas. No contexto desses instrumentos, os geradores de oitavas eram responsáveis por criar as frequências fundamentais e suas oitavas superiores e inferiores.&lt;/p&gt;

&lt;p&gt;Os órgãos antigos, como o lendário Hammond B3, utilizavam geradores de oitavas para produzir um som encorpado e cheio. A manipulação desses geradores nos &lt;strong&gt;Drawbars&lt;/strong&gt; permitia aos músicos criar timbres ricos e expressivos, tornando esses instrumentos essenciais para a música da década.&lt;/p&gt;

&lt;h3 id=&quot;divisores-de-oitavas-enfatizando-a-profundidade-sonora&quot;&gt;Divisores de Oitavas: Enfatizando a Profundidade Sonora&lt;/h3&gt;

&lt;p&gt;Em adição aos geradores de oitavas, os órgãos antigos dos anos 70 também contavam com divisores de oitavas. Esses dispositivos eram responsáveis por dividir o sinal gerado pelos osciladores em diferentes oitavas, permitindo uma abordagem mais versátil e dinâmica na criação de sons.&lt;/p&gt;

&lt;p&gt;Os divisores de oitavas eram particularmente notáveis pela forma como enriqueciam a paleta sonora dos músicos. Ao controlar a distribuição do sinal em oitavas específicas, os músicos podiam criar texturas sonoras complexas, empregando escalas e acordes de forma única. Isso proporcionava uma variedade de opções tonais, desde as profundezas ressonantes das oitavas mais baixas até as agudas e cristalinas oitavas superiores.&lt;/p&gt;

&lt;h3 id=&quot;o-par-de-chips-s50240-e-s10430&quot;&gt;O par de chips S50240 e S10430&lt;/h3&gt;

&lt;p&gt;Antes do advento de circuitos integrados especializados em geração e divisão de oitavas o processo de dividir as frequências das notas eram feitos com flip-flops discretos ou integrados. Os circuitos integrados &lt;strong&gt;S50240&lt;/strong&gt; e &lt;strong&gt;S10430&lt;/strong&gt; facilitaram a construção de órgãos eletrônicos polifônicos com o uso de apenas 2 ou três chips especializados.
O S50240 é o circuito integrado responsável por sintetizar as oitavas superiores do instrumento. Um oscilador tipicamente de 2Mhz será ligado na entrada e dividido em 12 frequências gerando 12 ondas quadradas com 50% de duty cycle correspondente a cada nota musical.
As divisões podem ser conferidas na tabela abaixo:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Divisão&lt;/th&gt;
      &lt;th&gt;Frequência resultante&lt;/th&gt;
      &lt;th&gt;Nota&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷478&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4184.10 Hz&lt;/td&gt;
      &lt;td&gt;Dó inferior&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷451&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4434.60 Hz&lt;/td&gt;
      &lt;td&gt;Dó sustenido&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷426&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4694.80 Hz&lt;/td&gt;
      &lt;td&gt;Ré&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷402&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;4975.10 Hz&lt;/td&gt;
      &lt;td&gt;Ré sustenido&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷379&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;5277.80 Hz&lt;/td&gt;
      &lt;td&gt;Mi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷358&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;5586.60 Hz&lt;/td&gt;
      &lt;td&gt;Fá&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷338&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;5917.20 Hz&lt;/td&gt;
      &lt;td&gt;Fá sustenido&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷319&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;6269.60 Hz&lt;/td&gt;
      &lt;td&gt;Sol&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷301&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;6644.50 Hz&lt;/td&gt;
      &lt;td&gt;Sol sustenido&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷284&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;7042.30 Hz&lt;/td&gt;
      &lt;td&gt;Lá&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷268&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;7462.70 Hz&lt;/td&gt;
      &lt;td&gt;Lá sustenido&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷253&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;7905.10 Hz&lt;/td&gt;
      &lt;td&gt;Si&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;÷239&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;8362.20 Hz&lt;/td&gt;
      &lt;td&gt;Dó superior&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;O S50240 sozinho nos permite apenas gerar 12 notas fundamentais. Para se obter as notas das oitavas inferiores dois S10430 são usados em conjunto com o S50240. Cada S10430 dividirá 4 notas em 4 oitavas e 2 notas em 3 oitavas totalizando por chip 22 teclas por chip e para se obter 44 teclas dois S10430 são usados em cascata. Cada divisor tem 4 saídas diferentes permitindo que com um potênciometro o músico possa misturar 4 oitavas da mesma nota nos níveis desejados alterando assim o timbre da nota. Além das 4 saídas as entradas das teclas no S10430 são sensíveis a tensão aplicada, permitindo a criação de efeitos de ataques e liberação das teclas, normalmente utilizando circuitos RC em cada tecla.&lt;/p&gt;

&lt;p&gt;O diagrama abaixo retirado do datasheet do S10430 ilustra facilmente essas ligações.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/S10430.png&quot; alt=&quot;Esquema do S50240 e S10430&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;outros-chips&quot;&gt;Outros chips&lt;/h3&gt;

&lt;p&gt;Esses chips são obsoletos e difíceis de se achar no mercado, porém não são os únicos a fazerem essa funções. Outras empresas lançaram no mercado outros chips muito conhecidos:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;13 Note Top Octave Synthetizer (TOS)&lt;/em&gt;&lt;/strong&gt;&lt;br /&gt;
50% Duty Cycle&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MO83B&lt;/li&gt;
  &lt;li&gt;M50240&lt;/li&gt;
  &lt;li&gt;M5891B1&lt;/li&gt;
  &lt;li&gt;S50240&lt;/li&gt;
  &lt;li&gt;50240&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;13 Note Top Octave Synthesizer (TOS)&lt;/strong&gt;&lt;br /&gt;
30% Duty Cycle&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MO82B&lt;/li&gt;
  &lt;li&gt;M50241&lt;/li&gt;
  &lt;li&gt;M5891A&lt;/li&gt;
  &lt;li&gt;S50241&lt;/li&gt;
  &lt;li&gt;50241&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;destaque grad-orange&quot;&gt;
&lt;p&gt;Qual a importância do Duty Cycle?&lt;/p&gt;
&lt;small&gt;Ter um duty cycle de 30% ou 50% influencia nos harmônicos gerados pela onda quadrada. O duty cycle de 50% gera harmônicos impares que para alguns gostos é mais ácido e agudo. Enquanto usar um duty cycle de 30% gera um forte harmônico par resultando em um timbre mais leve e macio. Alguns construtores alegam que um duty cycle de 25% é o melhor valor para gerar harmônicos pares.&lt;/small&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;12 Note Top Octave Synthesizer (TOS)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MO86B&lt;/li&gt;
  &lt;li&gt;M50242&lt;/li&gt;
  &lt;li&gt;S50242&lt;/li&gt;
  &lt;li&gt;50242&lt;/li&gt;
  &lt;li&gt;AY-1-0212&lt;/li&gt;
  &lt;li&gt;ECG-2043&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;12 Note Top Octave Synthesizer (TOS)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MO87B&lt;/li&gt;
  &lt;li&gt;MC86B1&lt;/li&gt;
  &lt;li&gt;ECG-2043&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Opções de substituição são poucas. O técnico dependerá de peças velhas. Alguns podem fazer seu próprio TOS utilizando FPGA ou algum microcontrolador rápido o suficiente para gerar 12 ondas quadradas sem desvio de fase. É importante se atentar que a maioria dos órgãos tem Vibrato quando se varia levemente a frequência do oscilador VCO de 2MHz.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Fontes:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;http://www.armory.com&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;S50240 e S10430 Datasheets&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Wikipedia&lt;/em&gt;&lt;/p&gt;</content><author><name></name></author><category term="eletronica" /><category term="música eletrônica" /><category term="sintetizadores" /><summary type="html">Órgãos Antigos dos Anos 70: Geradores e Divisores de Oitavas</summary></entry><entry><title type="html">Criando seu próprio vocabulário BPE no Tokenizers - Python</title><link href="http://0.0.0.0:4000/aplicadas/2023/12/01/criando-seu-proprio-vocabulario-no.html" rel="alternate" type="text/html" title="Criando seu próprio vocabulário BPE no Tokenizers - Python" /><published>2023-12-01T00:00:00-06:00</published><updated>2023-12-01T00:00:00-06:00</updated><id>http://0.0.0.0:4000/aplicadas/2023/12/01/criando-seu-proprio-vocabulario-no-</id><content type="html" xml:base="http://0.0.0.0:4000/aplicadas/2023/12/01/criando-seu-proprio-vocabulario-no.html">&lt;h2 id=&quot;tokenização&quot;&gt;Tokenização&lt;/h2&gt;

&lt;p&gt;Ao longo da evolução das aplicações NLP várias formas de se representar um texto foram abordadas. Imagine a seguinte frase &lt;strong&gt;“Qual o sentido da vida?”&lt;/strong&gt; como deveríamos representa-lá para ser usada em algum Modelo de Linguagem Natural? Um modelo de linguagem ‘lê’ uma parte do texto e prevê o próximo token, então a primeira abordagem talvez seja óbvia: Atribuir um número a cada letra e usar a sequência de números para representar a frase. Boa notícia, não precisamos atribuir número algum, eles já existem na codificação UTF-8 como vemos abaixo:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Qual o sentido da vida?&lt;/td&gt;
      &lt;td&gt;0x51 0x75 0x61 0x6c 0x20 0x6f 0x20 0x73 0x65 0x6e 0x74 0x69 0x64 0x6f 0x20 0x64 0x61 0x20 0x76 0x69 0x64 0x61 0x3f&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Porém essa representação não funciona muito bem.  Se por exemplo na entrada “Qual o sentido d” nessa codificação por letras sugerida o próximo token poderá ser o &lt;em&gt;“a”&lt;/em&gt;, &lt;em&gt;“e”&lt;/em&gt; e &lt;em&gt;“o”&lt;/em&gt; como nas frases &lt;em&gt;“Qual o sentido de …”&lt;/em&gt; e &lt;em&gt;“Qual o sentido do …”&lt;/em&gt; e porque não o &lt;em&gt;“i”&lt;/em&gt; em &lt;em&gt;“Qual o sentido disso …“&lt;/em&gt;, ou seja, a probabilidade do próximo token nessa codificação se diluí dificultando prever o próximo token. A situação piora com o espaço &lt;em&gt;” “&lt;/em&gt; ou o artigo &lt;em&gt;“a”&lt;/em&gt;, praticamente todas as letras/tokens tem a mesma probabilidade de ocorrerem depois deles.&lt;/p&gt;

&lt;p&gt;Outro problema é o contexto. As redes neurais vão perdendo o contexto ao longo das previsões e uma codificação como essa que precise de muitas iterações para formar uma frase fará a rede perder o ‘tema do assunto’.&lt;/p&gt;

&lt;p&gt;Outra forma sugerida para resolver esses problemas é atribuir um número as palavras (words) de um vocabulário como no exemplo abaixo:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Qual o sentido da vida?&lt;/td&gt;
      &lt;td&gt;0x13 0x03 0x123 0x10 0x54&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“Qual “&lt;/td&gt;
      &lt;td&gt;0x13&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“o “&lt;/td&gt;
      &lt;td&gt;0x03&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“sentido “&lt;/td&gt;
      &lt;td&gt;0x123&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“da “&lt;/td&gt;
      &lt;td&gt;0x10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“vida?”&lt;/td&gt;
      &lt;td&gt;0x54&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Na tabela acima cada palavra+pontuação tem um número associado. São 5 tokens então serão 5 números representando a frase toda. Nessa representação a rede neural faz poucas iterações e não se perde no contexto. De bônus ocupa pouco espaço e consome menos CPU correto? Sim. Mas alguns problemas surgem. Enquanto na representação por letras qualquer palavra do vocabulário pode ser representada, precisaríamos de uma enorme quantidade de números para representar todas as palavras existentes. Normalmente um vocabulário útil desses teria alguns Gigas de tamanho. E o que acontece se alguma palavra não conhecida aparecer? Há quem tenha usado o token &amp;lt;UNK&amp;gt; para representar uma palavra desconhecida … deselegante não?&lt;/p&gt;

&lt;h3 id=&quot;byte-pair-encoding-bpe&quot;&gt;Byte-Pair Encoding (BPE)&lt;/h3&gt;

&lt;p&gt;O BPE, usado inicialmente como um algoritmo para comprimir textos, achou seu sucesso nos modelos de linguagens localizando-se no entre-meio da representação por letras e por palavras. Na codificação BPE inicialmente todas as letras são incluídas, em seguida uma &lt;strong&gt;pesquisa&lt;/strong&gt; em uma grande quantidade de textos determinará as palavras e os RADICAIS frequentemente presentes nesses textos que serão incluídos na representação.&lt;/p&gt;

&lt;p&gt;Em português é extremamente comum o uso das preposições “do”, “da”, “em”; os artigos “um”, “uma”; os advérbios “não”, “sim”, “talvez”, em inglês é imperativo a presença do “the”, “were”, “have”, logo essas palavras são bons candidatos a serem incluídos no vocabulário.&lt;/p&gt;

&lt;p&gt;Aprendemos na escola a formação das palavras utilizando prefixos, sufixos e radicais, partindo disso, os prefixos “íssimo”,”an”, “anti”, “endo”, “hiper” bem como os sufixos “ismo”, “ença”, “ário” e tantos outros são fortes candidatos a serem representados pelo BPE. Por sorte nossa lingua tem radicais muito comuns que também podem ser incluídos na representação.&lt;/p&gt;

&lt;p&gt;Vejamos o exemplo da frase “Qual o sentido da vida?” na codificação BPE usada pelo GPT:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Token&lt;/th&gt;
      &lt;th&gt;Index&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;“Qual”&lt;/td&gt;
      &lt;td&gt;46181&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;” o”&lt;/td&gt;
      &lt;td&gt;267&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;” sent”&lt;/td&gt;
      &lt;td&gt;1908&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“ido”&lt;/td&gt;
      &lt;td&gt;17305&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;” da”&lt;/td&gt;
      &lt;td&gt;12379&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;” v”&lt;/td&gt;
      &lt;td&gt;410&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;“ida”&lt;/td&gt;
      &lt;td&gt;3755&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;”?”&lt;/td&gt;
      &lt;td&gt;30&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Como se pode ver a palavra “sentido” foi quebrada em dois tokens “ sent” e “ido”, “vida” foi quebrado em “ v” e “ida”; faria mais sentido representar “vida” por “vida”? Sim, mas o vocabulário usado é do GPT-4 e apesar dele ser multilingual ele foi primariamente treinado para o inglês e com poucos textos em português, consequentemente ele tem mais radicais e palavras em inglês que em qualquer outra língua.&lt;/p&gt;

&lt;p&gt;Como todas a letras estão incluídas qualquer palavra pode ser formada e como os radicais e as palavras mais usadas estão incluídas o contexto fica pequeno. Há um balanço entre flexibilização e tamanho.&lt;/p&gt;

&lt;div class=&quot;destaque azul&quot;&gt;
&lt;p&gt;Se quiser explorar mais a tokenização usada pelo ChatGPT use o site &lt;a href=&quot;https://observablehq.com/@simonw/gpt-tokenizer&quot; target=&quot;_blank&quot;&gt;https://observablehq.com/@simonw/gpt-tokenizer&lt;/a&gt; exemplificado na imagem abaixo:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://observablehq.com/@simonw/gpt-tokenizer&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/assets/imgs/Captura de tela de 2024-01-22 17-27-40.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;treinando-seu-próprio-vocabulário&quot;&gt;Treinando seu próprio vocabulário&lt;/h3&gt;

&lt;p&gt;Para treinar seu próprio vocabulário será necessário o módulo python &lt;strong&gt;tokenizers&lt;/strong&gt;. Primeiramente instale o módulo via pip ou usando seu gerenciador de pacotes ( preferido ).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install tokenizers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Incluiremos os módulos necessários no cabeçalho do arquivo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from tokenizers import Tokenizer, models, pre_tokenizers, decoders, trainers, processors
import glob
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O glob é excelente para essas tarefas ao facilitar adicionar novos arquivos simplesmente jogando eles em um diretório.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Initialize a tokenizer
tokenizer = Tokenizer(models.BPE())

# Customize pre-tokenization and decoding
tokenizer.pre_tokenizer = pre_tokenizers.ByteLevel(add_prefix_space=True)
tokenizer.decoder = decoders.ByteLevel()
tokenizer.post_processor = processors.ByteLevel(trim_offsets=True)

# And then train
trainer = trainers.BpeTrainer(
    vocab_size=32000,
    min_frequency=4,
    initial_alphabet=pre_tokenizers.ByteLevel.alphabet()
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Inicializamos o módulo com os parâmetros desejados. Os parâmetros mais importantes são&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;vocab_size=32000&lt;/strong&gt; - Diz qual o tamanho do vocabulário. Muito pequeno ajuda na velocidade da rede mas diminui a quantidade de palavras e radicais. O GPT usa tamanhos de 50k (~50.000) e 100k (~100.000) para seus vocabulários. Não esqueça que as letras serão incluídas, então o tamanho deve contar essas letras obrigatórias.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;min_frequency=4&lt;/strong&gt; - Frequência minima para um token ser incluído. Se alguém fizer um treinamento com diálogos de internet é muito provável que palavras digitadas erradas apareçam e outras somente uma vez, ou os famigerados kkkkkkkkkk+. É melhor deixar palavras poucos usadas de fora. Porém se o vocab_size for pequeno e a quantidade de textos grande e com muitas palavras é provável que somente palavras com muita frequência sejam incluídas.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;initial_alphabet=pre_tokenizers.ByteLevel.alphabet()&lt;/strong&gt; - Lembra das letras automaticamente incluídas? Não é automático. Elas são incluídas aqui.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Como glob será usado …&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;l = glob.glob(&quot;./**/*.txt&quot;, recursive=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Que fará uma lista chamada “l” com todos os aquivos *.txt no diretório e sub-diretório atual.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;specials = [
    &apos;&amp;lt;|query|&amp;gt;&apos;,
    &apos;&amp;lt;|answer|&amp;gt;&apos;,
    &apos;&amp;lt;|endoftext|&amp;gt;&apos;,
    &apos;&amp;lt;|code|&amp;gt;&apos;,
    &apos;&amp;lt;|system|&amp;gt;&apos;,
    &apos;&amp;lt;|hole|&amp;gt;&apos;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Essa etapa é importante.&lt;/strong&gt; A OpenAI usa muito o token &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;|endoftext|&amp;gt;&lt;/code&gt; para finalizar um texto e começar outro. Também é usado durante a inferência para informar que ela terminou. O token deve ser algo estranho aos textos das linguagens que ele suporta então foi escolhido esse formato estranho &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;|endoftext|&amp;gt;&lt;/code&gt;. Porém essa palavra tem 13 caracteres e ocuparia muito espaço bem como CPU para operá-la. Não seria melhor transformar esse token em um só número como é feito nas palavras e radicais mais usados?&lt;/p&gt;

&lt;p&gt;Pois é isso que é feito nessa fase. Adiciona-se os &lt;strong&gt;specials tokens&lt;/strong&gt; ou tokens especiais que serão usados para alguma finalidade.&lt;/p&gt;

&lt;div class=&quot;destaque azul&quot;&gt;
&lt;p&gt;Eu uso o &lt;strong&gt;&amp;lt;|query|&amp;gt;&lt;/strong&gt;, &lt;strong&gt;&amp;lt;|endoftext|&amp;gt;&lt;/strong&gt; e &lt;strong&gt;&amp;lt;|answer|&amp;gt;&lt;/strong&gt; para montar datasets com perguntas e respostas como no exemplo:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;|query|&amp;gt;Quem descobriu o Brasil?&amp;lt;|answer|&amp;gt;Pedro Álvares Cabral&amp;lt;|endoftext|&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;E o três tokens serão convertidos em um só número (cada) do que uma sequência de characteres.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Configurado os parâmetros agora é feito o processo de pesquisa e quando acabar o processo salvamos o *.json do vocabulário gerado para uso posterior.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tokenizer.add_special_tokens(specials)
tokenizer.train(l, trainer=trainer)

# And Save it
tokenizer.save(&quot;byte-level-bpe.tokenizer.32k.json&quot;, pretty=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O arquivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byte-level-bpe.tokenizer.32k.json&lt;/code&gt; deverá aparecer no diretório atual ao final do processo com o vocabulário gerado.&lt;/p&gt;

&lt;h3 id=&quot;usando-o-vocabulário-gerado&quot;&gt;Usando o vocabulário gerado&lt;/h3&gt;

&lt;p&gt;Para carregar o json do vocabulário o Tokenizer tem a função &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;from_file&lt;/code&gt; e para codificar um texto qualquer no vocabulário carregado usa-se o &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tokenizer.encode(texto)&lt;/code&gt; que retornará a lista &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ids&lt;/code&gt; contendo os números dos tokens do texto convertido.
O processo inverso, ou seja, transformar uma lista de números obtidos da conversão de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tokenizer.encode(texto).ids&lt;/code&gt; em texto novamente é feito utilizando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decode&lt;/code&gt;.
Lembre-se:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tokenizer.encode - Transforma o texto em tokens do vocabulário carregado
tokenizer.decode - Transforma uma lista de números em texto dos tokens representados pelo vocabulário carregado.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Como se pode ver no exemplo abaixo:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import tokenizers
from tokenizers import Tokenizer
from tokenizers.models import BPE
tokenizer = Tokenizer.from_file(&quot;byte-level-bpe.tokenizer.32k.json&quot;)
encode = lambda s: tokenizer.encode(s).ids
decode = lambda l: tokenizer.decode(l)

A = encode(&quot;Qual o sentido da vida?&quot;)
B = decode(A)

print(A,B)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;programa-completo&quot;&gt;Programa completo&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from tokenizers import Tokenizer, models, pre_tokenizers, decoders, trainers, processors
import glob
# Initialize a tokenizer
tokenizer = Tokenizer(models.BPE())

# Customize pre-tokenization and decoding
tokenizer.pre_tokenizer = pre_tokenizers.ByteLevel(add_prefix_space=True)
tokenizer.decoder = decoders.ByteLevel()
tokenizer.post_processor = processors.ByteLevel(trim_offsets=True)

# And then train
trainer = trainers.BpeTrainer(
    vocab_size=32000,
    min_frequency=4,
    initial_alphabet=pre_tokenizers.ByteLevel.alphabet()
)

l = glob.glob(&quot;./**/*.txt&quot;, recursive=True)

specials = [
    &apos;&amp;lt;|query|&amp;gt;&apos;,
    &apos;&amp;lt;|answer|&amp;gt;&apos;,
    &apos;&amp;lt;|endoftext|&amp;gt;&apos;,
    &apos;&amp;lt;|code|&amp;gt;&apos;,
    &apos;&amp;lt;|system|&amp;gt;&apos;,
    &apos;&amp;lt;|hole|&amp;gt;&apos;
]

tokenizer.add_special_tokens(specials)
tokenizer.train(l, trainer=trainer)

# And Save it
tokenizer.save(&quot;byte-level-bpe.tokenizer.32k.json&quot;, pretty=True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="aplicadas" /><category term="python" /><category term="IA" /><category term="tokenizers" /><category term="llm" /><summary type="html">Tokenização</summary></entry><entry><title type="html">Siglas de sensores e atuadores OBD2 - Eletrônica automotiva</title><link href="http://0.0.0.0:4000/eletronica/2023/11/15/siglas-de-sensores-obd2.html" rel="alternate" type="text/html" title="Siglas de sensores e atuadores OBD2 - Eletrônica automotiva" /><published>2023-11-15T19:26:05-06:00</published><updated>2023-11-15T19:26:05-06:00</updated><id>http://0.0.0.0:4000/eletronica/2023/11/15/siglas-de-sensores-obd2</id><content type="html" xml:base="http://0.0.0.0:4000/eletronica/2023/11/15/siglas-de-sensores-obd2.html">&lt;h3 id=&quot;se-você-tem-um-leitor-obd2-em-inglês-essa-lista-pode-te-ajudar-a-desvendar-as-siglas-na-leitura&quot;&gt;Se você tem um leitor OBD2 em inglês essa lista pode te ajudar a desvendar as siglas na leitura.&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Informação exibida&lt;/th&gt;
      &lt;th&gt;Explicação&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Fuel System 1 Status [Status 1 ou Fuelsys1]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Em sistema de controle &lt;strong&gt;OL - Open Loop&lt;/strong&gt; significa que o controle está sendo feito as ‘cegas’, sem o uso dos sensores. Em modo &lt;strong&gt;CL - Closed Loop&lt;/strong&gt; o controle está sendo feito utilizando os sensores. A sonda lambda é o principal sensor utilizado para controlar a mistura ar-combustível e para funcionar ela precisa estar quente.Ao ligar o carro com o motor frio a sonda lambda (fria) não será utilizada de início, então a ECU operará o motor em modo OL - Open Loop até que a sonda lambda envie os dados corretos quando finalmente a ECU (agora com valores corretos dos sensores já aquecidos) muda para Closed Loop.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Calculated Load Value [CLV or Load_PCT]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Carga do motor.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Engine Coolant Temp [ECT]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Temperatura do liquido de arrefecimento (água do radiador).&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Short Term Fuel Trim-Bank 1 [STFT 1 ou SHRTFT1]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Ajuste imediato da mistura estequiometria. Se o valor é positivo a ECU está adicionando combustível (mistura rica) se negativo a ECU está retirando combustível (mistura pobre). Esse ajuste se perde ao desligar o carro. Quando se está ‘descendo na banguela’, por exemplo, com o carro engatado a ECU para de mandar combustível mostrando valores negativos para STFT.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Long Term Fuel Trim- Bank 1 [LTFT 1 ou LONGFT1]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Ajuste de longo prazo da mistura com base no histórico do sensor explicado acima. Se por exemplo o sensor imediato ficar por muito tempo em 6% o Long Term Fuel Trim irá incrementar seu ajuste para compensar até que o Short Term fique em 0%. Esse ajuste não se perde ao desligar o carro, é um dos indicadores mais importantes de falhas no motor.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Engine RPM [RPM]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O RPM do motor&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Vehicle Speed Sensor [VSS]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Velocidade do veiculo&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Ignition Timing Advance #1 [Sparkadv]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Mostra o ângulo de ignição ou mais conhecido como “ponto de ignição”. Diminui com o aumento da temperatura.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Intake Air Temp [IAT]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Temperatura do ar.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Air Flow Rate from Mass Air Flow Sensor [MAF]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;A quantidade de ar entrando no sistema de admissão. Em geral está associado ao sensor MAF.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Absolute Throttle Position [TP or ABS_TP]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Posição do sensor de corpo de borboleta. Ao pisar no pedal do acelerador esse sinal deve subir.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Bank 1 – Sensor 2 Volts [O2S12]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Tensão da sonda lambda pós catalisador. Em situações normais não deve variar.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Bank 1 – Sensor 1 [O2S11]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Tensão da sonda lambda antes do catalisador. No osciloscópio se apresenta como uma onda oscilante entre 900mV e 200mV. Valores acima de 450mV indica mistura rica e valores abaixo mistura pobre. O sinal não deve ser contínuo, mas oscilante. O ideal é oscilar simetricamente em mistura pobre e rica, se ficar por mais tempo acima ou abaixo de 450mV possivelmente é sinal de problemas.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;OBD Requirements OBD and OBD2 [OBDSUP]&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;O protocolo de comunicação utilizado pelo OBD&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="eletronica" /><category term="obd2" /><summary type="html">Se você tem um leitor OBD2 em inglês essa lista pode te ajudar a desvendar as siglas na leitura.</summary></entry><entry><title type="html">O problema dual e primal - Otimização Matemática</title><link href="http://0.0.0.0:4000/aplicadas/2023/01/10/problema-dual-primal.html" rel="alternate" type="text/html" title="O problema dual e primal - Otimização Matemática" /><published>2023-01-10T00:00:00-06:00</published><updated>2023-01-10T00:00:00-06:00</updated><id>http://0.0.0.0:4000/aplicadas/2023/01/10/problema-dual-primal</id><content type="html" xml:base="http://0.0.0.0:4000/aplicadas/2023/01/10/problema-dual-primal.html">&lt;p&gt;Os &lt;strong&gt;problemas primal&lt;/strong&gt; e &lt;strong&gt;dual&lt;/strong&gt; estão intrinsecamente ligados na teoria da dualidade em &lt;strong&gt;programação linear&lt;/strong&gt;. Eles representam duas formulações diferentes de um mesmo problema de otimização linear, sendo inter-relacionados de maneira específica.&lt;/p&gt;

&lt;h3 id=&quot;problema-primal&quot;&gt;Problema Primal&lt;/h3&gt;

&lt;p&gt;O problema primal é a formulação original do problema de otimização linear. Geralmente, é expresso na forma padrão:&lt;/p&gt;

&lt;p&gt;\[\text{Maximize } \quad c^Tx\]
\[\text{sujeito a } \quad Ax \leq b\]
\[x \geq 0\]&lt;/p&gt;

&lt;p&gt;onde:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;$c$ é um vetor de coeficientes da função objetivo,&lt;/li&gt;
  &lt;li&gt;$x$ é o vetor de variáveis de decisão,&lt;/li&gt;
  &lt;li&gt;$A$ é uma matriz de coeficientes das restrições,&lt;/li&gt;
  &lt;li&gt;$b$ é o vetor de limites das restrições.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A meta é maximizar ou minimizar a função objetivo $c^Tx$ sujeita a um conjunto de restrições lineares.&lt;/p&gt;

&lt;h3 id=&quot;problema-dual&quot;&gt;Problema Dual&lt;/h3&gt;

&lt;p&gt;O problema dual é uma formulação alternativa derivada do problema primal usando a teoria de dualidade. Introduz-se multiplicadores de Lagrange para as restrições do problema primal, gerando assim o problema dual. A formulação geral do problema dual é:&lt;/p&gt;

&lt;p&gt;\[\text{Minimize } \quad b^Ty\]
\[\text{sujeito a } \quad A^Ty \geq c\]
\[y \geq 0\]&lt;/p&gt;

&lt;p&gt;onde:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;$y$ é o vetor de multiplicadores de Lagrange (ou variáveis duais),&lt;/li&gt;
  &lt;li&gt;$b$ é o vetor de termos constantes das restrições do primal,&lt;/li&gt;
  &lt;li&gt;$A^T$ é a matriz transposta de $A$,&lt;/li&gt;
  &lt;li&gt;$c$ é o vetor de coeficientes da função objetivo do primal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O objetivo do problema dual é encontrar os multiplicadores de Lagrange que minimizam $b^Ty$ sujeito às restrições lineares.&lt;/p&gt;

&lt;h3 id=&quot;relação-de-dualidade&quot;&gt;Relação de Dualidade&lt;/h3&gt;

&lt;p&gt;A relação fundamental entre os problemas primal e dual é expressa pelo Teorema da Dualidade, que estabelece que o valor ótimo do problema primal é sempre maior ou igual ao valor ótimo do problema dual, e vice-versa. Matematicamente, isso é expresso como:&lt;/p&gt;

&lt;p&gt;\[\text{Para todo } x \text{ factível no primal e para todo } y \text{ factível no dual, temos } c^Tx \geq b^Ty\]&lt;/p&gt;

&lt;p&gt;Se ambos os problemas alcançam seus valores ótimos, então há igualdade entre eles. Esta relação é conhecida como dualidade forte.&lt;/p&gt;

&lt;p&gt;A dualidade não apenas fornece uma maneira de verificar a solução ótima, mas também oferece informações valiosas sobre a sensibilidade do problema às mudanças nos parâmetros e fornece soluções alternativas.&lt;/p&gt;</content><author><name></name></author><category term="aplicadas" /><category term="programação linear" /><category term="otimização" /><category term="pesquisa operacional" /><summary type="html">Os problemas primal e dual estão intrinsecamente ligados na teoria da dualidade em programação linear. Eles representam duas formulações diferentes de um mesmo problema de otimização linear, sendo inter-relacionados de maneira específica.</summary></entry><entry><title type="html">Usando os serviços OpenAI para criar um ChatBot - Python</title><link href="http://0.0.0.0:4000/python/2023/01/02/usando-servicos-openai.html" rel="alternate" type="text/html" title="Usando os serviços OpenAI para criar um ChatBot - Python" /><published>2023-01-02T00:00:00-06:00</published><updated>2023-01-02T00:00:00-06:00</updated><id>http://0.0.0.0:4000/python/2023/01/02/usando-servicos-openai</id><content type="html" xml:base="http://0.0.0.0:4000/python/2023/01/02/usando-servicos-openai.html">&lt;p&gt;Em 2023 Taylor Swift foi eleita a personalidade do ano, mas há quem diga que 2023 foi mesmo o ano da &lt;strong&gt;Inteligência Artificial&lt;/strong&gt;. E de fato há uma corrida das empresas que ficaram para trás do lançamento do modelo  &lt;strong&gt;text-davinci&lt;/strong&gt; da OpenAI,era um modelo rudimentar comparado aos &lt;strong&gt;gpt-turbo-3.5&lt;/strong&gt; e o &lt;strong&gt;gpt-4&lt;/strong&gt; usados hoje, mas fez barulho e mexeu no mercado. Quem se lembra que o lançamento ocorreu quando o mundo ainda estava assutado com a COVID-19 e a Guerra na Ulcrânia, tudo isso acontecia e assustava, mas as atenções e esperanças estavam mesmo para o futuro que já que tinha chegado. O Google lançou o Bard mas não impressionou. A Baidu lançou seu modelo porém restrito ainda a sua área, enquanto a Amazon e a Apple correm atrás do prejuízo. Elon Musk lançou o Grok&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, mas até o momento tinha fila de espera para usar. A Apple tenta negociar um acordo milionário para poder usar os artigos da imprensa americana para seu modelo de linguagem&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. A Microsoft foi astuta e financiou a OpenAI quando percebeu o potencial do &lt;strong&gt;GPT-2&lt;/strong&gt; e hoje oferece os modernos modelos como serviço pago ou gratuito.&lt;/p&gt;

&lt;h3 id=&quot;fazendo-um-chatbot-usando-o-openai&quot;&gt;Fazendo um chatbot usando o OpenAI&lt;/h3&gt;

&lt;p&gt;Fazer um chatbot usando os serviços da OpenAI é simples, usa-se somente UMA chamada de função do módulo da openai em python.&lt;/p&gt;
&lt;h4 id=&quot;cadastro-e-criação-da-secret-key&quot;&gt;Cadastro e criação da Secret Key&lt;/h4&gt;
&lt;p&gt;Primeiro é preciso fazer o cadastro na plataforma de serviço OpenAI API no site &lt;a href=&quot;https://platform.openai.com/signup&quot;&gt;https://platform.openai.com/signup&lt;/a&gt;. Até o momento eles oferecem créditos para avaliação do serviço e não é preciso cartão de crédito para usar esses créditos. Entretanto a avaliação fica restrista ao modelo &lt;strong&gt;gpt-3.5-turbo&lt;/strong&gt; que não deixa de ser um modelo capaz e poderoso. Se você usa a versão gratuita do site você usa esse modelo.&lt;/p&gt;

&lt;p&gt;Feito o cadastro é preciso gerar a OpenAI KEY para que se possa usar os serviços.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/openaikey.png&quot; alt=&quot;Página para criar a Secret Key da OpenAI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Clique em “&lt;strong&gt;Create new Secret Key&lt;/strong&gt;” para criar sua Secret Key, como visto na figura acima.&lt;/p&gt;

&lt;h4 id=&quot;instalação-do-módulo-de-acesso&quot;&gt;Instalação do módulo de acesso&lt;/h4&gt;
&lt;p&gt;Em seguida é necessário instalar o módulo da openai. Isso pode ser feito pelo PIP ou preferencialmente pelo seu gerenciador de pacotes em sua distribuição Linux.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;pip install openai&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;fazendo-sua-primeira-conversa&quot;&gt;Fazendo sua primeira conversa&lt;/h4&gt;

&lt;p&gt;Finalmente podemos fazer a primeira chamada para a OpenAI. Primeiramente é preciso criar uma instância OpenAI usando sua SECRET_KEY do passo anterior. Para fazer uma requisição usa-se o &lt;strong&gt;chat.completions.create&lt;/strong&gt; como visto no código abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;
# Importa o módulo OpenAI instalado com pip anteriormente
from openai import OpenAI
# Cria uma instância OpenAI. Utilize aqui sua Secret Key no lugar de SUA_SECRET_KEY ( entre aspas )
client = OpenAI(SUA_SECRET_KEY)

# Finalmente fazemos uma requisição ao serviço de chat
completion = client.chat.completions.create(
model=&quot;gpt-3.5-turbo&quot;,  # Modelo usado.
# A personalidade e o texto enviado ao chat.
messages=[
    {&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;Você é um assistente virtual divertido e bem humorado.&quot;},
    {&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Qual o sentido da vida?&quot;}
]
)

# E finalmente exibimos a resposta do modelo &quot;gpt-3.5-turbo&quot; a questão &quot;Qual o sentido da vida?&quot;
print(completion.choices[0].message)
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;personalizando-e-embutindo-informações&quot;&gt;Personalizando e embutindo informações&lt;/h4&gt;
&lt;p&gt;Basicamente é só isso. Configura a Key e chama os serviço de complementação de texto &lt;strong&gt;completions.create&lt;/strong&gt; com a personalidade e a mensagem. Fácil não?!&lt;/p&gt;

&lt;p&gt;Agora é uma boa hora para explicar os roles da requisição. Como se pode ver no código temos uma &lt;em&gt;list&lt;/em&gt; com duas &lt;em&gt;dict&lt;/em&gt; com as chaves “role” e “content”. Essas informações serão enviadas ao modelo para configurá-lo com a personalidade e informações que se deseja.&lt;/p&gt;

&lt;h5 id=&quot;role-system&quot;&gt;Role System&lt;/h5&gt;

&lt;p&gt;O role system é o mais forte e determina a personalidade do assistente. Veja alguns exemplos de role system:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;“Você é uma IA da empresa Octopus S.A.. A Empresa está localizada no endereço X e tem o telefone Y.”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“Você é um bot do telegram divertido e bem humorado. Sua personalidade é ácida e irônica”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“Você é um assistente virtual no twitch do Gamer Lucão, você adora Minecraft e Playstation 5”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Esse role é opcional. Não é preciso enviar nada se não quiser.&lt;/p&gt;

&lt;h5 id=&quot;role-assistant&quot;&gt;Role Assistant&lt;/h5&gt;

&lt;p&gt;O role assistant é útil para enviar a conversa anterior e informações relevantes. Em geral usa-se formatação de strings no python para embutir informações e o texto anterior. Veja alguns exemplos:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;EXPEDIENTE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;estamos abertos até as 18:00hrs&quot;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hoje é &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datetime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; e hoje &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPEDIENTE&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;REQ_ANT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Onde compro o Dipirona?&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RESP_ANT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Olá, Você pode comprar na farmácia ...&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;system&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sa&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Anteriormente o usuário solicitou &apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;REQ_ANT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos; e você respondeu &apos;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RESP_ANT&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;role-user&quot;&gt;Role User&lt;/h5&gt;

&lt;p&gt;O role user é onde as mensagens do usuário serão inseridas. No exemplo acima foi a mensagem “Qual o sentido da vida?”.&lt;/p&gt;

&lt;h3 id=&quot;limitações&quot;&gt;Limitações&lt;/h3&gt;

&lt;p&gt;Cada requisição é única e não tem memória. Ele não se lembra das requisições anteriores. Para que o modelo saiba o que foi dito anteriormente e ele possa continuar a conversa o histórico deve ser passado no role assistant.
Também há um limite de informações que pode ser colocado nos roles. O conjunto dos roles é chamado &lt;strong&gt;contexto&lt;/strong&gt;.  O limite do contexto é dado em tokens e atualmente é 4096 tokens, mas há modelos que tem 16k tokens.&lt;/p&gt;

&lt;p&gt;Tokens podem ser uma letra ou uma palavra inteira, depende do vocabulário usado pelo modelo. Não conte as letras para verificar o limite de tokens, pois como dito, os tokens podem ser uma letra ou um pedaço de uma palavra ou uma palavra inteira.&lt;/p&gt;

&lt;p&gt;Os modelos tem controle de conversas tóxicas, ilegais, abusivas e temas sensíveis. Não peça para o modelo contar um conto erótico que dificilmente ele o fará. Também não é possível inventar histórias mentirosas de pessoas ou temas sensíveis. O modelo tem personalidade multicultural, feminista e woke.&lt;/p&gt;

&lt;p&gt;Quando acabar seus créditos só será possível continuar requisitando com um cartão de crédito onde será cobrado por tokens. Não é muito, você brincando sozinho consumirá menos de \$ 1,00 ou em uso mais intensivo \$ 5,00. Você pode configurar um limite no site para no caso de passar desse valor ele pare de responder as requisições.&lt;/p&gt;

&lt;h3 id=&quot;empresas&quot;&gt;Empresas&lt;/h3&gt;

&lt;p&gt;Algumas observações são importantes quando for usar o chatbot em empresas. Vamos imaginar um cenário onde o chatbot deverá ser usado para consultar um grande banco de dados de produtos e como se percebeu a limitação do contexto (os roles system, assistant e user) não tem como colocar todos os produtos e suas caracteristicas no contexto da requisição, isso é impraticável.&lt;/p&gt;

&lt;p&gt;Para que uma grande base de dados seja ‘ligada’ ao chatbot deverá ser usado um &lt;em&gt;Langchain&lt;/em&gt; ou um &lt;em&gt;Information Extration&lt;/em&gt;.
O &lt;em&gt;Langchain&lt;/em&gt; usa duas camadas. A primeira etapa é a indexação da base de dados que você quer disponibilizar ao chatbot. Nesta etapa documentos, pdfs, textos, planilhas são indexadas por um &lt;em&gt;modelo de embedded&lt;/em&gt; que gerará um grande vetor de números de ponto flutuante. Esse vetor representará uma sentença do texto e será armazenado em um banco de dados vetorial ( Vector Database ).&lt;/p&gt;

&lt;p&gt;Quando o usuário fizer uma requisição a requisição irá novamente para esse modelo embedded que gerará um vetor embedded representando a requisição e o banco de dados será consultado com o valor que mais se aproxima do vetor da requisição.
Encontrado a informação, a informação é retornada para o chatbot para ele gerar uma resposta com a informação obtida do banco de dados.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exemplo:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Um escritório de advocacia quer um chatbot ajudando seus advogados.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Primeira etapa ( pode ser feita somente uma vez ):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Reunir todos os documentos, leis, sentenças e diário oficiais que achar necessário.&lt;/li&gt;
  &lt;li&gt;Extrair as sentenças ( por exemplo fazendo um &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.split(&quot;.&quot;)&lt;/code&gt; no texto ).&lt;/li&gt;
  &lt;li&gt;Gerar um vetor embedded para cada sentença.&lt;/li&gt;
  &lt;li&gt;Amazenar os vetores embedded em um banco de dados vetorial.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Segunda etapa (a cada requisição ):&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;O usuário digita uma requisição por exemplo &lt;em&gt;“O Sr. Antonio de oliveira tem algum processo cível?”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;O modelo embedded gera um vetor com o texto da requisição.&lt;/li&gt;
  &lt;li&gt;O banco de dados é consultado com esse vetor para achar a sentença mais próxima.&lt;/li&gt;
  &lt;li&gt;Ele achou por exemplo &lt;em&gt;“Antonio de oliveira x José no nascimento”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;A informação é adicionada ao role assistant para o chatbot gerar uma resposta.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O Information Extration é diferente este não usa um modelo embedded. Ele extrai a intenção do usuário e as palavras chaves que serão usados para montar diretamente uma requisição SQL ao banco de dados que então retornará a informação a ser inserida nos roles da requisição da resposta.&lt;/p&gt;

&lt;p&gt;Langchain e Information Extraction são áreas e ferramentas diferentes mas auxiliares do modelos de linguagem. A OpenAI e outras empresas disponibilizam esses serviços pagos.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://grok.x.ai/&quot;&gt;https://grok.x.ai/&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.nytimes.com/2023/12/22/technology/apple-ai-news-publishers.html&quot;&gt;https://www.nytimes.com/2023/12/22/technology/apple-ai-news-publishers.html&lt;/a&gt; &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="python" /><category term="AI" /><category term="ChatGPT" /><category term="python" /><summary type="html">Em 2023 Taylor Swift foi eleita a personalidade do ano, mas há quem diga que 2023 foi mesmo o ano da Inteligência Artificial. E de fato há uma corrida das empresas que ficaram para trás do lançamento do modelo text-davinci da OpenAI,era um modelo rudimentar comparado aos gpt-turbo-3.5 e o gpt-4 usados hoje, mas fez barulho e mexeu no mercado. Quem se lembra que o lançamento ocorreu quando o mundo ainda estava assutado com a COVID-19 e a Guerra na Ulcrânia, tudo isso acontecia e assustava, mas as atenções e esperanças estavam mesmo para o futuro que já que tinha chegado. O Google lançou o Bard mas não impressionou. A Baidu lançou seu modelo porém restrito ainda a sua área, enquanto a Amazon e a Apple correm atrás do prejuízo. Elon Musk lançou o Grok1, mas até o momento tinha fila de espera para usar. A Apple tenta negociar um acordo milionário para poder usar os artigos da imprensa americana para seu modelo de linguagem2. A Microsoft foi astuta e financiou a OpenAI quando percebeu o potencial do GPT-2 e hoje oferece os modernos modelos como serviço pago ou gratuito. https://grok.x.ai/ &amp;#8617; https://www.nytimes.com/2023/12/22/technology/apple-ai-news-publishers.html &amp;#8617;</summary></entry><entry><title type="html">Usando CVXPY para o problema da mochila (knapsack) - Otimização</title><link href="http://0.0.0.0:4000/aplicadas/2022/10/20/cvpy-knapsack.html" rel="alternate" type="text/html" title="Usando CVXPY para o problema da mochila (knapsack) - Otimização" /><published>2022-10-20T20:26:05-05:00</published><updated>2022-10-20T20:26:05-05:00</updated><id>http://0.0.0.0:4000/aplicadas/2022/10/20/cvpy-knapsack</id><content type="html" xml:base="http://0.0.0.0:4000/aplicadas/2022/10/20/cvpy-knapsack.html">&lt;p&gt;O problema da mochila ou em inglês “knapsack” é um problema clássico de otimização combinatória.&lt;/p&gt;

&lt;p&gt;O problema consiste em colocar em uma mochila o maior valor possível de itens com determinada capacidade de peso. A cada item é associado um peso e um valor. O valor pode ser a utilidade ou o preço. Ao ir para o camping espera-se que a mochila seja carregada da maior utilidade de itens possível, enquanto na mochila de um motoqueiro o desejado é transportar o maior valor possível. Dessa forma, o objetivo da otimização é ter o maior valor dentro da mochila, ou seja, maximizar o valor sem ultrapassar o peso. Alguns itens podem ser muito valiosos porém pesados, enquantos alguns itens leves podem ter valor pequeno. Um algoritmo trivial de otimização irá na tentativa e erro colocar itens na mochila até alcançar o peso permitido e ir trocando os itens procurando sempre maximizar o valor dentro da mochila.&lt;/p&gt;

&lt;p&gt;Esse problema é generalizado para outras aplicações onde o peso pode ser qualquer variável de penalidade e o preço uma variável de maximização. Exemplos não faltam:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Embarcar a maior quantidade de itens possíveis em um caminhão com custo de carga alto&lt;/li&gt;
  &lt;li&gt;Alocar máquinas de produção visando o menor tempo possível e maior valor produzido&lt;/li&gt;
  &lt;li&gt;Corte de chapas de madeira, metal, tecidos&lt;/li&gt;
  &lt;li&gt;Empacotamento&lt;/li&gt;
  &lt;li&gt;Investimento de Capital&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cvxpy&quot;&gt;CVXPY&lt;/h4&gt;

&lt;p&gt;CVXPY é um framework python para diversos otimizadores com uma linguagem própria e suporte a Numpy.&lt;/p&gt;

&lt;p&gt;Para instalar o CVXPY use o pip:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install cvxpy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Um dos otimizadores disponíveis é o CBC  um otimizador de programação linear inteiro open-source. O CBC pode ser usado em linha de comando sem ser necessário o CVXPY, mas neste caso será necessário aprender sua linguagem de entrada. &lt;/p&gt;

&lt;p&gt;Também será necessário instalar o CVXOPT:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install cvxopt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esse problema aparece em diversas áreas como a logística, computação e investimentos.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import cvxpy as cp
import numpy as np
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dados-de-entrada-do-problema&quot;&gt;Dados de entrada do problema&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Valores = np.array([10,13,1,100,45,13,156,76,4,59,97,99])
Pesos = np.array([50,55,10,5,1,98,34,3,9,3,7,19])
Capacidade_Mochila = 100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;variaveis-de-decisão&quot;&gt;Variaveis de decisão&lt;/h4&gt;

&lt;p&gt;Cada Item Xi terá valor 1 se estiver na mochila ou 0 se estiver fora cp.Variable cria uma variável no CVX ( não confunda cp com np ) do tipo boolean do tamanho da quantidade de itens&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Xi = cp.Variable((Valores.size), boolean = True)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;constraints-do-problema&quot;&gt;Constraints do problema&lt;/h4&gt;

&lt;p&gt;A soma total dos pesos dos itens escolhidos por Xi devem ser igual ou menor que a capacidade da mochila                &lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;constraints = [ Xi @ Pesos &amp;lt;= Capacidade_Mochila ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Tambem pode ser escrito com o mesmo resultado como:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;constraints = [ cp.sum( cp.multiply (Xi, Pesos ) ) &amp;lt;= Capacidade_Mochila ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O Objetivo do problema é maximizar os valores na mochila&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;objective = cp.Maximize( Xi @ Valores )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;finalmente chamamos o solver com verbose para acompanhar 
o progresso e a execução máxima de 1hr&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;prob = cp.Problem(objective, constraints)
prob.solve(solver=cp.CBC,verbose=True, maximumSeconds = 1 * 60 * 60) 
print(&quot;Status          : &quot;, prob.status)
print(&quot;Valor encontrado: &quot;, prob.value)
print(&quot;Valor de Xi     : &quot;, Xi.value)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;O problema da mochila tem muitas aplicações práticas principalmente na logística. Imagine uma transportadora que precisa distribuir seus pacotes utilizando vans e caminhões. Cada pacote tem peso, tamanho, localidade, tempo de espera e valor. Um programa de otimização pode ajudar no preenchimento dos caminhões e em aplicações profissionais traçar a rota de distribuição de cada veículo.&lt;/p&gt;

&lt;p&gt;Programas de otimização não acham o &lt;strong&gt;melhor&lt;/strong&gt; valor, porque em geral é uma tarefa impossível (o mais correto seria improvável) de se achar, devido a explosão combinatória. Por isso são chamados ‘otimizadores’ pois eles buscam a melhor solução possível, ou seja, uma &lt;strong&gt;solução ótima&lt;/strong&gt;.&lt;/p&gt;</content><author><name></name></author><category term="aplicadas" /><category term="python" /><category term="otimização" /><category term="CVXPY" /><summary type="html">O problema da mochila ou em inglês “knapsack” é um problema clássico de otimização combinatória.</summary></entry></feed>